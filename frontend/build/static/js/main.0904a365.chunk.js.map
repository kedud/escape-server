{"version":3,"sources":["dataProvider.js","api/socketIO.js","nodes/NodeCard.js","nodes/NodeList.js","nodes/index.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","httpClient","fetchUtils","fetchJson","getList","resource","params","url","then","headers","json","console","log","data","response","total","getOne","id","getMany","query","filter","JSON","stringify","ids","getManyReference","pagination","page","perPage","sort","field","order","range","target","parseInt","get","split","pop","update","method","body","updateMany","create","delete","deleteMany","socket","openSocket","cardStyle","width","minHeight","margin","display","verticalAlign","NodeCard","props","state","Date","record","last_ping","hostname","cb","this","err","node","parse","setState","status","types","on","setInterval","current_time","event","emit","sendActionEvent","Card","style","CardHeader","title","TextField","source","subheader","CardContent","Chip","label","variant","color","CardActions","textAlign","includes","Button","onClick","handleButtonClick","disabled","React","Component","NodeGrid","basePath","map","key","list","List","App","put","showNotification","Admin","dataProvider","Resource","name","nodes","Boolean","window","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0904a365.chunk.js","sourcesContent":["import { fetchUtils } from 'react-admin';\nimport { stringify } from 'query-string';\n\nconst apiUrl = 'http://localhost:5000';\nconst httpClient = fetchUtils.fetchJson;\n\nexport default {\n    getList: (resource, params) => {\n        // const { page, perPage } = params.pagination;\n        // const { field, order } = params.sort;\n        // const query = {\n        //     sort: JSON.stringify([field, order]),\n        //     range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n        //     filter: JSON.stringify(params.filter),\n        // };\n        //const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        const url = `${apiUrl}/${resource}`;\n        return httpClient(url).then(({ headers, json }) => {\n            console.log(json);\n            return ({\n            data: json.response,\n            total: 1,//json.length,\n            //total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        })}\n        );\n    },\n\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify({\n                ...params.filter,\n                [params.target]: params.id,\n            }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n\n    updateMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        })),\n\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json })),\n\n    deleteMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'DELETE',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n};\n","import openSocket from 'socket.io-client';\n\nconst  socket = openSocket('http://localhost:5000');\n\n\nfunction socketIoEvents(cb) {\n\tsocket.on('connect', (node) => {\n\t\tcb('connect');\n\t});\n\tsocket.on('disconnect', (node) => {\n\t\tcb('disconnect');\n\t});\n}\n\nfunction subscribeToNode(hostname, cb) {\n\t//console.log(\"subscribeToNode hostname: \", hostname);\n\tsocket.on(hostname, (node) => {\n\t\t//console.log('subscribeToNode', node);\n\t\tcb(null, node);\n\t});\n}\n\nfunction sendActionEvent(event, hostname) {\n\tsocket.emit(event, {hostname: hostname});\n}\n\nexport { socketIoEvents, subscribeToNode, sendActionEvent };","import React from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { Button, Chip } from '@material-ui/core';\n\nimport { TextField } from \"react-admin\";\n\nimport { subscribeToNode, sendActionEvent } from '../api/socketIO';\n\nconst cardStyle = {\n    width: 300,\n    minHeight: 300,\n    margin: '0.5em',\n    display: 'inline-block',\n    verticalAlign: 'top'\n};\n\nexport class NodeCard extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { \n\t\t    \"last_ping\": new Date(props.record.last_ping), \n\t\t    \"types\": [],\n\t\t  };\n       \n    } \n\n    componentDidMount() {\n    \tsubscribeToNode(this.props.id, (err, node) => {\n    \t\tlet json = JSON.parse(node);\n            this.setState({ \n\t\t    \t\"last_ping\": new Date(json.last_ping * 1000),\n\t\t    \t\"status\": json.status,\n\t\t    \t\"types\": json.types ? json.types : [],\n\t\t\t});\n        });\n\n        setInterval( () => {\n\t        let current_time = new Date();\n\t\t\tthis.setState({ \n\t\t\t\t\"current_time\": current_time, \n\t\t\t\t});\n\t\t}, 100);\n    }\n\n    handleButtonClick(event, record) {\n    \tsendActionEvent(event, record.hostname);\n    }\n\n    render() {\n        let { record } = this.props;\n        return (\n            <Card style={cardStyle}>\n                <CardHeader\n                    title={<TextField record={record} source=\"hostname\" />}\n                    subheader={<TextField record={record} source=\"url\" />}\n                />\n               \t<CardContent>\n                {\n                \tthis.state.status === \"resolved\"? \n                \t(\n                \t\t<Chip label={ this.state.status } variant=\"default\" />\n                \t) \n                \t:\n                \t(\n                \t\t<Chip label={ this.state.status } variant=\"default\" color=\"secondary\"/>\n            \t\t)\t\n                }\n                </CardContent>\n\t\t\t\t\t\t\t\t{ this.state.current_time && this.state.last_ping && (\n\t\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.state.current_time - this.state.last_ping < 2000 ? \n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t<Chip label={(this.state.current_time - this.state.last_ping)} variant=\"default\" />\n\t\t\t\t\t\t\t\t\t\t) \n\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t<Chip label={(this.state.current_time - this.state.last_ping)} variant=\"default\" color=\"secondary\"/>\n\t\t\t\t\t\t\t\t\t)\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t\t)}\n                <CardActions style={{ textAlign: 'right' }}>\n                { \n                \tthis.state.types.includes(\"actuator\") ? \n                \t(\n                \t\t<Button \n\t                \t\tvariant=\"contained\" \n\t                \t\tcolor=\"primary\"\n\t                \t\tonClick={() => this.handleButtonClick('action', record)}\n                \t\t>\n\t                \t\tAction\n\t                \t</Button>\n                \t)\n                \t:\n                \t(\n                \t\t<Button \n\t                \t\tvariant=\"contained\" \n\t                \t\tcolor=\"primary\"\n\t                \t\tdisabled\n\t                \t\tonClick={() => this.handleButtonClick('action', record)}\n                \t\t>\n\t                \t\tAction\n\t                \t</Button>\n                \t)\n            \t}\n                \t<Button \n                \t\tvariant=\"contained\" \n                \t\tcolor=\"secondary\"\n                \t\tonClick={() => this.handleButtonClick('reboot', record)}\n                \t>\n                \t\tRestart Node\n                \t</Button>\n                </CardActions>\n            </Card>\n        );\n    }\n}\n\nexport default NodeCard;\n","import * as React from \"react\";\n\nimport { NodeCard } from './NodeCard';\nimport { List } from 'react-admin';\n\nclass NodeGrid extends React.Component {\n\n    render() {\n        let { ids, data, basePath } = this.props;\n        return (\n            <div style={{ margin: '1em' }}>\n            {ids.map(id =>\n                <NodeCard id={id} key={id} record={data[id]} basePath={ basePath }/>\n            )}\n            </div>\n        );\n    }\n}\n\nexport const NodeList = (props) => (\n    <List title=\"All nodes\" {...props}>\n        <NodeGrid />\n    </List>\n);\n\nexport default NodeList;\n","import NodeList from './NodeList';\n\nexport default {\n    list: NodeList,\n};","import React from 'react';\nimport { put } from 'redux-saga/effects';\nimport './App.css';\n\nimport dataProvider from './dataProvider';\nimport { Admin, Resource, showNotification } from 'react-admin';\n\nimport nodes from './nodes';\n\nimport { socketIoEvents } from './api/socketIO';\n\nclass App extends React.Component  {\n\n\t// constructor(props) {\n\t// \tsuper(props);\n\t\t\n\t// }\n\n\tcomponentDidMount() {\n\t\tsocketIoEvents((event) => {\n\t\t\tconsole.log(\"socketIO event: \" + event);\n\t\t\tput(showNotification(\"socketIO event: \" + event));\n\t\t}\n\t\t)\n\t}\n\n\trender() {\n\t\treturn(\n\t\t    <Admin dataProvider={dataProvider}>\n\t\t        <Resource name=\"node\"  {...nodes} />\n\t\t    </Admin>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}